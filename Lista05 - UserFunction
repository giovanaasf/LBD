CREATE TABLE TAB_Cliente
(   CodCliente number(5) NOT NULL,
    NomeCliente varchar2(30) NOT NULL,
    Endereco varchar2(30),
    Cidade varchar2(20),
    CEP varchar2(10),
    UF char(2)
);

CREATE TABLE TAB_Vendedor
(   CodVendedor number(5) NOT NULL,
    NomeVendedor varchar2(30) NOT NULL,
    FaixaComissao number(4,2),
    Salario number(7,2)
);

CREATE TABLE TAB_Produto
(   CodProduto number(5) NOT NULL,
    Descricao varchar(30),
    Unidade char(2),
    ValorUnitario number(6,2)
);

CREATE TABLE TAB_Pedido
(   NumPedido number(5) NOT NULL,
    PrazoEntrega date,
    CodCliente number(5),
    CodVendedor number(5)
);

CREATE TABLE TAB_ItemPedido
(   NumPedido number(5) NOT NULL,
    CodProduto number(5) NOT NULL,
    Quantidade number(5)
);

CREATE TABLE TabLog
( 	datalog DATE,
	campo1 VARCHAR2(60),
	campo2 VARCHAR2(60)
);

CREATE TABLE TabErro
(	dataerro DATE,
	mensagem VARCHAR2(50)
);

ALTER TABLE TAB_Cliente ADD PRIMARY KEY(CodCliente);
ALTER TABLE TAB_Produto ADD PRIMARY KEY(CodProduto);
ALTER TABLE TAB_VENDEDOR ADD PRIMARY KEY(CodVendedor);
ALTER TABLE TAB_PEDIDO ADD PRIMARY KEY(NumPedido);
ALTER TABLE TAB_ItemPedido ADD PRIMARY KEY(NumPedido,CodProduto);

ALTER TABLE TAB_Pedido ADD FOREIGN KEY (CodCliente) REFERENCES TAB_Cliente;
ALTER TABLE TAB_Pedido ADD FOREIGN KEY (CodVendedor) REFERENCES TAB_Vendedor;
ALTER TABLE TAB_ItemPedido ADD FOREIGN KEY (NumPedido) REFERENCES TAB_Pedido;
ALTER TABLE TAB_ItemPedido ADD FOREIGN KEY (CodProduto) REFERENCES TAB_Produto;

INSERT INTO TAB_Vendedor VALUES (5,'Antonio Pedro',5.0,400);
INSERT INTO TAB_Vendedor VALUES (15,'Carlos Sola',0.0,400);
INSERT INTO TAB_Vendedor VALUES (25,'Ana Carolina',1.0,200);
INSERT INTO TAB_Vendedor VALUES (35,'Solange Almeida',1.0,300);

INSERT INTO TAB_Cliente VALUES (30, 'João da Silva', 'AV. MATT HOFFMANN, 1100', 'SÃO PAULO', '97056-001', 'SP');
INSERT INTO TAB_Cliente VALUES (31, 'LUCAS ANTUNES', 'RUA TRODANI, 120', 'SOROCABA', '19658-023', 'SP');
INSERT INTO TAB_Cliente VALUES (32, 'LAURA STRAUSS', 'RUA TULIPAS, 650', 'PRIMAVERA', '18556-025', 'SP');
INSERT INTO TAB_Cliente VALUES (33, 'LAURAS', 'RUA TULIPAS, 650', 'PRIMAVERA', '18556-025', 'SP');
INSERT INTO TAB_Cliente VALUES (34, 'LAURAS', 'RUA TULIPAS, 650', 'PRIMAVERA', '18556-025', 'SP');

INSERT INTO TAB_Produto VALUES (11, 'Apple Watch', 'UN', 975.99);
INSERT INTO TAB_Produto VALUES (12, 'IPAD', 'UN', 999.70);
INSERT INTO TAB_Produto VALUES (13, 'PÓ PARA TONER', 'KG', 85.60);
INSERT INTO TAB_Produto VALUES (14, 'Mouse', 'UN', 45.60);
INSERT INTO TAB_Produto VALUES (15, 'Caneta digital', 'UN', 100.00);
INSERT INTO TAB_Produto VALUES (40,'Mouse sem fio', 'UN', 68.90);
INSERT INTO TAB_Produto VALUES (42,'FIO HDMI', 'UN', 18.00);
INSERT INTO TAB_Produto VALUES (43,'Pendrive Star Wars', 'UN', 48.00);
INSERT INTO TAB_Produto VALUES (44,'Mouse com fio', 'UN', 28.00);
INSERT INTO TAB_Produto VALUES (45,'Pendrive do Mickey', 'UN', 50.00);

INSERT INTO TAB_PEDIDO VALUES (8, to_date('23-05-2020', 'DD-MM-YYYY'), 32, 25);
INSERT INTO TAB_PEDIDO VALUES (9, to_date('21/02/2020', 'DD-MM-YYYY'), 32, 5);
INSERT INTO TAB_PEDIDO VALUES (11, to_date('21/02/2020', 'DD-MM-YYYY'), 32, 5);
INSERT INTO TAB_PEDIDO VALUES (12, to_date('21/02/2020', 'DD-MM-YYYY'), 32, 5);
INSERT INTO TAB_PEDIDO VALUES (13, to_date('21/02/2020', 'DD-MM-YYYY'), 31, 5);
INSERT INTO TAB_PEDIDO VALUES (15, to_date('21/02/2020', 'DD-MM-YYYY'), 31, 5);
INSERT INTO TAB_PEDIDO VALUES (14, to_date('21/02/2020', 'DD-MM-YYYY'), 31, 5);
INSERT INTO TAB_PEDIDO VALUES (16, to_date('21/02/2020', 'DD-MM-YYYY'), 31, 5);
INSERT INTO TAB_PEDIDO VALUES (10, to_date('20/02/2020', 'DD-MM-YYYY'), 30, 5);

INSERT INTO TAB_ItemPedido VALUES (7,11,1);
INSERT INTO TAB_ItemPedido VALUES (7,40,2);
INSERT INTO TAB_ItemPedido VALUES (7,42,1);
INSERT INTO TAB_ItemPedido VALUES (8,43,5);
INSERT INTO TAB_ItemPedido VALUES (9,12,1);
INSERT INTO TAB_ItemPedido VALUES (10,11,1);
INSERT INTO TAB_ItemPedido VALUES (10,43,1);
INSERT INTO TAB_ItemPedido VALUES (10,13,2);
INSERT INTO TAB_ItemPedido VALUES (8,40,1);

--1. 

Create or replace Function Fn_VerHora(pdata in date)

return varchar2 -- return tipo

as

vdata varchar2(40);

 

Begin

 

vdata := to_char(pdata, 'dd/mm/yyyy:HH24:mi:ss');

 

Return (vdata);

 

End Fn_VerHora;

 

select FN_VERHORA (sysdate) from dual;

 

--2. Escreva uma função que receba como parâmetro um código de Paciente (modelo Paciente-consulta) 

--e devolva “IDOSO” se o paciente tiver mais de 65 anos. Caso contrário devolva “NÃO IDOSO”.

 

create or replace Function Fn_Idoso(pcodpac paciente.codpaciente%type)

return varchar2

as 

vtexto varchar2(30);

vdatanasc date;

 

begin

  select datanasc into vdatanasc from paciente

  where codpaciente = pcodpac;


  if (((sysdate - vdatanasc)/365.25) > 65) then 

    vtexto := 'IDOSO';

  else

    vtexto := 'NÃO IDOSO';

  END IF; 


  return (vtexto);

  end Fn_Idoso;


  SELECT FN_IDOSO (4) FROM PACIENTE;


  SELECT * FROM PACIENTE;



--3. Crie uma função chamada FN_ConsultaEstoque que retorna a qtde corrente em estoque de determinado produto.
--a- Passe para a função o código do produto
--b- Crie o campo QTDE_estoque na tabela de produto.
--c- Crie uma forma de executar a função criada.

--b
alter table tab_produto add qtde_estoque number(5);
update tab_produto set qtde_estoque = 50;

--a
Create or replace Function Fn_ConsultaEstoque (pcodprod TaB_produto.codproduto%type)
return number
as
Vestoque TaB_produto.qtde_estoque%type;
Begin
	Select qtde_estoque into Vestoque From tab_produto
	Where tab_produto.codproduto = pcodprod;	

	Return (Vestoque);
End Fn_ConsultaEstoque;

--c. 
select codproduto, descricao, unidade, valorunitario, Fn_ConsultaEstoque(codproduto) as QTDE_Estoque
from tab_produto; 



--4. Escreva uma função que receba como parâmetro um número de telefone não formatado( só números) e exiba este número no formato: (xx)xxxx-xxxx
Create or replace Function Fn_VerTelefone(ptel in number)
return varchar2
as
vtelefone varchar2(40);
Begin
	vtelefone := '(' || SUBSTR(ptel,1,2) || ')' || SUBSTR(ptel,3,4) || '-' || SUBSTR(ptel,7,4);
	Return (vtelefone);
End Fn_VerTelefone; 

select FN_VerTelefone (2799775677) from dual;




--5. Escreva uma função que receba como parâmetro o código do cliente e conte quantos pedidos ele tem.
--Se ele tiver mais de 3 pedidos devolver mensagem:'Cliente preferencial' concatenado com o código e nome do cliente.
--Se tiver entre 1 e 3 devolver mensagem 'Cliente Normal' concatenado com o código e nome do cliente
--Se não tiver pedidos 'Cliente Inativo' concatenado com o código e nome do cliente;
--Testar se o cliente existe, caso contrário emitir mensagem de erro.

create or replace Function Fn_EstadoCliente (pcodcli tab_cliente.codcliente%type)
return varchar2
as
vcodcli tab_cliente.codcliente%type;
vtexto varchar2(60);
vqtdeped number(5);
vnome tab_cliente.nomecliente%type;
Begin
	select codcliente, nomecliente into vcodcli, vnome from tab_cliente
	where codcliente = pcodcli;

	select count(*) into vqtdeped from tab_pedido
	where codcliente = pcodcli;

	if (vqtdeped > 3) then
		vtexto := ('Cliente preferencial: ' || vcodcli || ' - ' || vnome);
	else
		if (vqtdeped between 1 and 3) then
        	vtexto := ('Cliente normal: ' || vcodcli || ' - ' || vnome);
		else 
            vtexto := ('Cliente inativo: ' || vcodcli || ' - ' || vnome);
		end if;
	end if;

	Return(vtexto);

	exception
  		when no_data_found then
        	insert into taberro values( sysdate, 'o cliente não existe: '||pcodcli);
END Fn_EstadoCliente;

	
select * from tab_cliente;

SELECT codcliente, Fn_EstadoCliente(codcliente) as estado_cliente
FROM tab_cliente
WHERE codcliente IN (SELECT codcliente FROM tab_cliente)
ORDER BY codcliente;

SELECT Fn_EstadoCliente(9999) FROM dual;--n consigo testar exception
